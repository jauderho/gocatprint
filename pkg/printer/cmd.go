package printer

import "strconv"

var (
	cmdGetDevState      = bs([]int8{81, 120, -93, 0, 1, 0, 0, 0, -1})
	cmdSetQuality200DPI = bs([]int8{81, 120, -92, 0, 1, 0, 50, -98, -1})
	cmdLatticeStart     = bs([]int8{81, 120, -90, 0, 11, 0, -86, 85, 23, 56, 68, 95, 95, 95, 68, 56, 44, -95, -1})
	cmdLatticeEnd       = bs([]int8{81, 120, -90, 0, 11, 0, -86, 85, 23, 0, 0, 0, 0, 0, 0, 0, 23, 17, -1})
	cmdSetPaper         = bs([]int8{81, 120, -95, 0, 2, 0, 48, 0, -7, -1})
	cmdPrintImg         = bs([]int8{81, 120, -66, 0, 1, 0, 0, 0, -1})
	cmdPrintText        = bs([]int8{81, 120, -66, 0, 1, 0, 1, 7, -1})
	checksumTable       = bs([]int8{})
)

// to easily write tests from Python output (bytearray)
func unquote(s string) []byte {
	unq, err := strconv.Unquote(`"` + s + `"`)
	if err != nil {
		panic(err)
	}

	return []byte(unq)
}

// bs casts signed (Java) bytes ([]int8) to Go signed []byte
func bs(b []int8) (ret []byte) {
	ret = make([]byte, len(b))
	for i, v := range b {
		ret[i] = byte(v)
	}
	return
}

func checkSum(data []byte, startIx, len int) (ret byte) {
	ret = 0
	for i := startIx; i < startIx+len; i++ {
		ret = checksumTable[(ret^data[i])&0xff]
	}

	return
}

func cmdFeedPaper(howMuch int8) (ret []byte) {
	ret = bs([]int8{
		81,
		120,
		-67,
		0,
		1,
		0,
		howMuch,
		0,
		-1,
	})
	ret[7] = checkSum(ret, 6, 1)
	return
}

func cmdSetEnergy(val int16) (ret []byte) {
	ret = bs([]int8{
		81,
		120,
		-81,
		0,
		2,
		0,
		int8((val >> 8) & -1),
		int8(val),
		0,
		-1,
	})
	ret[7] = checkSum(ret, 6, 2)
	return
}
